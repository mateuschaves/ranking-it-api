// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  name     String?
  password String

  ranking            Ranking[]
  userRanking        UserRanking[]
  rankingInvite      RankingInvite[]
  rankingItemComment RankingItemComment[]
  rankingItem        RankingItem[]
  rankingItemScore   RankingItemScore[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatar    File?    @relation(fields: [avatarId], references: [id])
  avatarId  String?
}

model Ranking {
  id          String  @id @default(cuid())
  ownerId     String
  owner       User    @relation(fields: [ownerId], references: [id])
  name        String
  description String?
  photo       String?

  rankingItem   RankingItem[]
  rankingInvite RankingInvite[]
  userRanking   UserRanking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files     File[]
}

model RankingItem {
  id            String @id @default(cuid())
  rankingId     String
  createdById   String
  createdByUser User   @relation(fields: [createdById], references: [id])

  ranking            Ranking              @relation(fields: [rankingId], references: [id])
  rankingItemComment RankingItemComment[]
  rankingItemScore   RankingItemScore[]

  name        String
  description String?
  photo       String?
  latitude    Float?
  longitude   Float?
  link        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RankingItemComment {
  id            String      @id @default(cuid())
  rankingItemId String
  userId        String
  comment       String
  rankingItem   RankingItem @relation(fields: [rankingItemId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RankingItemScore {
  id            String @id @default(cuid())
  rankingItemId String
  userId        String
  score         Int

  rankingItem RankingItem @relation(fields: [rankingItemId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRanking {
  id        String @id @default(cuid())
  userId    String
  rankingId String

  user    User    @relation(fields: [userId], references: [id])
  ranking Ranking @relation(fields: [rankingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RankingInvite {
  id          String @id @default(cuid())
  invitedById String
  rankingId   String
  email       String

  invitedBy User    @relation(fields: [invitedById], references: [id])
  ranking   Ranking @relation(fields: [rankingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id        String    @id @default(uuid())
  name      String
  url       String
  path      String
  mimetype  String
  size      Int
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  Ranking   Ranking?  @relation(fields: [RankingId], references: [id])
  RankingId String?   @map("ranking_id")
  User      User[]

  @@map("files")
}
