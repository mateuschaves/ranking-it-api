generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  name                 String?
  password             String
  refreshToken         String?
  pushToken            String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  avatarId             String?
  ranking              Ranking[]
  rankingInvite        RankingInvite[]
  rankingItem          RankingItem[]
  rankingItemComment   RankingItemComment[]
  rankingItemScore     RankingItemScore[]
  rankingItemUserPhoto RankingItemUserPhoto[]
  avatar               File?                  @relation(fields: [avatarId], references: [id])
  userRanking          UserRanking[]
}

model Ranking {
  id              String            @id @default(cuid())
  ownerId         String
  name            String
  description     String?
  bannerId        String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  banner          File?             @relation(fields: [bannerId], references: [id])
  owner           User              @relation(fields: [ownerId], references: [id])
  rankingCriteria RankingCriteria[]
  rankingInvite   RankingInvite[]
  rankingItem     RankingItem[]
  userRanking     UserRanking[]
}

model RankingItem {
  id                   String                 @id @default(cuid())
  rankingId            String
  createdById          String
  name                 String
  description          String?
  photo                String?
  latitude             Float?
  longitude            Float?
  link                 String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  createdByUser        User                   @relation(fields: [createdById], references: [id])
  ranking              Ranking                @relation(fields: [rankingId], references: [id])
  rankingItemComment   RankingItemComment[]
  rankingItemScore     RankingItemScore[]
  rankingItemUserPhoto RankingItemUserPhoto[]
}

model RankingCriteria {
  id               String             @id @default(cuid())
  rankingId        String
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ranking          Ranking            @relation(fields: [rankingId], references: [id])
  rankingItemScore RankingItemScore[]
}

model RankingItemComment {
  id            String      @id @default(cuid())
  rankingItemId String
  userId        String
  comment       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  rankingItem   RankingItem @relation(fields: [rankingItemId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

model RankingItemScore {
  id                String          @id @default(cuid())
  rankingItemId     String
  userId            String
  score             Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  rankingCriteriaId String
  rankingCriteria   RankingCriteria @relation(fields: [rankingCriteriaId], references: [id])
  rankingItem       RankingItem     @relation(fields: [rankingItemId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
}

model RankingItemUserPhoto {
  id            String      @id @default(cuid())
  rankingItemId String
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  photoId       String
  photo         File        @relation(fields: [photoId], references: [id])
  rankingItem   RankingItem @relation(fields: [rankingItemId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

model UserRanking {
  id        String   @id @default(cuid())
  userId    String
  rankingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ranking   Ranking  @relation(fields: [rankingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model RankingInvite {
  id          String   @id @default(cuid())
  invitedById String
  rankingId   String
  email       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invitedBy   User     @relation(fields: [invitedById], references: [id])
  ranking     Ranking  @relation(fields: [rankingId], references: [id])
}

model File {
  id                   String                 @id @default(cuid())
  name                 String
  url                  String
  path                 String
  mimetype             String
  size                 Int
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @default(now()) @updatedAt @map("updated_at")
  deletedAt            DateTime?              @map("deleted_at")
  Ranking              Ranking[]
  RankingItemUserPhoto RankingItemUserPhoto[]
  User                 User[]

  @@map("files")
}
